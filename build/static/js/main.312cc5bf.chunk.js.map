{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","catch","error","alert","Lista","props","henkN","map","henk","key","name","number","onClick","handleRemoval","value","Suodatin","filt","onChange","kasittelija","Notification","message","className","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filtteri","setFiltteri","alertMessage","setAlertMessage","useEffect","console","log","personService","initialPersons","personsToShow","filter","includes","event","target","onSubmit","preventDefault","length","personsObject","loytyy","i","window","confirm","setTimeout","location","reload","added","concat","type","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.312cc5bf.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst poista = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n    .catch(error => {\r\n        alert(`Person already removed from the server`)\r\n    })\r\n}\r\n\r\nexport default { getAll, create, poista, update }","import React, { useState, useEffect } from 'react';\nimport personService from './services/persons'\n\nconst  App = (props) => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filtteri, setFiltteri ] = useState('')\n  const [ alertMessage, setAlertMessage ] = useState(null)\n\n  const hook = () => {\n    console.log('effect')\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n        console.log('henkilot ladattu')\n      })\n  }\n\n  useEffect(hook, [])\n\n  const personsToShow = persons.filter(persons => persons.name.includes(filtteri));\n\n  const addPersons = (event) => {\n    event.preventDefault()\n    console.log('nappulaa painettu', newName, filtteri, persons.length)\n    const personsObject = {\n      name: newName,\n      number: newNumber,\n      id: newName,\n    }\n\n    let loytyy = false;\n    for (let i = 0; i < persons.length; i++) {\n      console.log('etsinta', i)\n      if (persons[i].name === personsObject.name) {\n        loytyy = true;\n        console.log('loytyi')\n        if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n          personService\n            .update(newName, personsObject)\n            //.then(window.location.reload(true))\n            setAlertMessage(`${newName} number updated`)\n            setTimeout(() => {\n              setAlertMessage(null)\n              window.location.reload(true)\n            }, 3000)\n            //window.location.reload(true)\n        }\n        break;\n      }\n      console.log('ei loytynyt kierroksella', i)\n    }\n    if (loytyy === false) {\n      personService\n        .create(personsObject)\n        .then(added => {\n          setPersons(persons.concat(added))\n          setAlertMessage(`${newName} added`)\n          setTimeout(() => {\n            setAlertMessage(null)\n          }, 3000)\n          setNewName('')\n          setNewNumber('')\n        })\n    } \n  }\n\n  const handleRemoval = (event) => {\n    event.preventDefault()\n    console.log('poistoa painettu', event.target.value)\n    personService\n      .poista(event.target.value)\n      setAlertMessage('person deleted')\n      setTimeout(() => {\n        setAlertMessage(null)\n        window.location.reload(true)\n      }, 3000)\n  }\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setFiltteri(event.target.value)\n  }\n  \n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={alertMessage} />\n      <Suodatin filt={filtteri} kasittelija={handleFilterChange} />\n      <h2>add a new</h2>\n      <form onSubmit={addPersons}>\n        <div>\n          name: \n          <input\n            value={newName}\n            onChange={handleNameChange} />\n        </div>\n        <div>\n          number:\n          <input\n            value={newNumber}\n            onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      <Lista henkN={personsToShow} handleRemoval={handleRemoval} />\n    </div>\n  )\n}\n\nconst Lista = (props) => {\n\n  return (\n    <ul>\n      {props.henkN.map(henk =>\n        <li key={henk.name}>\n          {henk.name} {henk.number} <button onClick={props.handleRemoval} value={henk.id}>delete</button>\n        </li>\n        )}\n    </ul>\n  )\n}\n\nconst Suodatin = (props) => {\n  return (\n    <div>\n      filter shown with<input\n        value={props.filt}\n        onChange={props.kasittelija} />\n    </div>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className=\"alert\">\n      {message}\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}